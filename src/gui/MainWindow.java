/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.Table;
import bl.LoadAndSaveData;
import database.DBAccess;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import listModel.ColumnNamesLM;
import listModel.TableNamesLM;
import tableModel.TableContentTM;

/**
 *
 * @author Steffie
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form DiffToolGui
     */
    public static final Color backgroundColorPanel = new Color(229, 229, 229);
    public static final Color backgroundColorButton = new Color(199, 199, 199);
    private TableNamesLM tnlmLeft;
    private TableNamesLM tnlmRight;
    private ColumnNamesLM cnlm;
    private TableContentTM tctm = null;
    public DBAccess dba;
    private LinkedList<Table> liTablesLeft = new LinkedList<>();
    private LinkedList<Table> liTablesRight = new LinkedList<>();
    private int extractData;
    private boolean leftList;
    private File savedFile1 = null;
    private File savedFile2 = null;
    private File existingFile1 = null;
    private File existingFile2 = null;
    private int enableCounter = 0;
    private boolean enableItemSelect = false;
    private String databaseName1 = "";
    private String databaseName2 = "";
    private boolean automaticallySelectingTables = false;

    public MainWindow() {
        initComponents();
        this.getContentPane().setBackground(backgroundColorPanel);
        btCompareData.setBackground(backgroundColorButton);
        btDownloadData.setBackground(backgroundColorButton);
        btExtractData1.setBackground(backgroundColorButton);
        btExtractData2.setBackground(backgroundColorButton);
        btOpenDBFile1.setBackground(backgroundColorButton);
        btOpenDBFile2.setBackground(backgroundColorButton);
        this.setLocationRelativeTo(null);
        enableButtons(false);
        btDownloadData.setEnabled(false);
        liTablesLeft.clear();
        liTablesRight.clear();
        liTables1.removeAll();
        liTablesC.removeAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        bgTableGroup = new javax.swing.ButtonGroup();
        pnButtonToolBar = new javax.swing.JPanel();
        pnCompareButton = new javax.swing.JPanel();
        btCompareData = new javax.swing.JButton();
        lbPlaceholder9 = new javax.swing.JLabel();
        lbPlaceholder10 = new javax.swing.JLabel();
        lbPlaceholder15 = new javax.swing.JLabel();
        pnDownloadButton = new javax.swing.JPanel();
        btDownloadData = new javax.swing.JButton();
        lbPlaceholder11 = new javax.swing.JLabel();
        lbPlaceholder12 = new javax.swing.JLabel();
        lbPlaceholder16 = new javax.swing.JLabel();
        pnTableDisplayOptions = new javax.swing.JPanel();
        lbPlaceholder14 = new javax.swing.JLabel();
        pnRadioButtonsTable = new javax.swing.JPanel();
        rbTableBothAuto = new javax.swing.JRadioButton();
        rbTableSeperate = new javax.swing.JRadioButton();
        rbDisplayDifferences = new javax.swing.JRadioButton();
        lbPlaceholder13 = new javax.swing.JLabel();
        pnMain = new javax.swing.JPanel();
        pnFirstDatabase = new javax.swing.JPanel();
        pnShowAllTables1 = new javax.swing.JPanel();
        paExtractData = new javax.swing.JPanel();
        btExtractData1 = new javax.swing.JButton();
        paButton = new javax.swing.JPanel();
        lbPlaceholder = new javax.swing.JLabel();
        lbPlaceholder2 = new javax.swing.JLabel();
        lbPlaceholder3 = new javax.swing.JLabel();
        lbPlaceholder4 = new javax.swing.JLabel();
        btOpenDBFile1 = new javax.swing.JButton();
        spTable1 = new javax.swing.JScrollPane();
        liTables1 = new javax.swing.JList();
        pnDetails = new javax.swing.JPanel();
        lbDatabaseName1 = new javax.swing.JLabel();
        spTableContent1 = new javax.swing.JScrollPane();
        tbTableContent1 = new javax.swing.JTable();
        pnSecondDatabase = new javax.swing.JPanel();
        pnShowAllTables2 = new javax.swing.JPanel();
        pnExtractData = new javax.swing.JPanel();
        btExtractData2 = new javax.swing.JButton();
        pnButton1 = new javax.swing.JPanel();
        lbPlaceholder1 = new javax.swing.JLabel();
        lbPlaceholder5 = new javax.swing.JLabel();
        lbPlaceholder6 = new javax.swing.JLabel();
        lbPlaceholder7 = new javax.swing.JLabel();
        btOpenDBFile2 = new javax.swing.JButton();
        spTableC = new javax.swing.JScrollPane();
        liTablesC = new javax.swing.JList();
        pnDetails1 = new javax.swing.JPanel();
        lbDatabaseName2 = new javax.swing.JLabel();
        spTableContent2 = new javax.swing.JScrollPane();
        tbTableContent2 = new javax.swing.JTable();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Database Diff-Tool");
        setMaximumSize(new java.awt.Dimension(1280, 800));
        setMinimumSize(new java.awt.Dimension(1280, 800));
        setPreferredSize(new java.awt.Dimension(1280, 800));
        getContentPane().setLayout(new java.awt.BorderLayout(20, 5));

        pnButtonToolBar.setBackground(new java.awt.Color(229, 229, 229));
        pnButtonToolBar.setLayout(new java.awt.BorderLayout());

        pnCompareButton.setBackground(new java.awt.Color(229, 229, 229));
        pnCompareButton.setMaximumSize(new java.awt.Dimension(490, 100));
        pnCompareButton.setMinimumSize(new java.awt.Dimension(4900, 100));
        pnCompareButton.setPreferredSize(new java.awt.Dimension(490, 100));
        pnCompareButton.setLayout(new java.awt.BorderLayout(15, 6));

        btCompareData.setBackground(new java.awt.Color(229, 229, 229));
        btCompareData.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btCompareData.setText("Compare Data");
        btCompareData.setMaximumSize(new java.awt.Dimension(180, 60));
        btCompareData.setMinimumSize(new java.awt.Dimension(180, 60));
        btCompareData.setPreferredSize(new java.awt.Dimension(180, 60));
        btCompareData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCompareData(evt);
            }
        });
        pnCompareButton.add(btCompareData, java.awt.BorderLayout.CENTER);

        lbPlaceholder9.setBackground(new java.awt.Color(229, 229, 229));
        pnCompareButton.add(lbPlaceholder9, java.awt.BorderLayout.LINE_START);

        lbPlaceholder10.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder10.setMaximumSize(new java.awt.Dimension(100, 10));
        lbPlaceholder10.setMinimumSize(new java.awt.Dimension(100, 510));
        lbPlaceholder10.setPreferredSize(new java.awt.Dimension(100, 10));
        pnCompareButton.add(lbPlaceholder10, java.awt.BorderLayout.PAGE_START);

        lbPlaceholder15.setMaximumSize(new java.awt.Dimension(100, 5));
        lbPlaceholder15.setMinimumSize(new java.awt.Dimension(100, 5));
        lbPlaceholder15.setPreferredSize(new java.awt.Dimension(100, 5));
        pnCompareButton.add(lbPlaceholder15, java.awt.BorderLayout.PAGE_END);

        pnButtonToolBar.add(pnCompareButton, java.awt.BorderLayout.LINE_START);

        pnDownloadButton.setBackground(new java.awt.Color(229, 229, 229));
        pnDownloadButton.setMaximumSize(new java.awt.Dimension(490, 100));
        pnDownloadButton.setMinimumSize(new java.awt.Dimension(4900, 100));
        pnDownloadButton.setPreferredSize(new java.awt.Dimension(490, 100));
        pnDownloadButton.setLayout(new java.awt.BorderLayout(15, 6));

        btDownloadData.setBackground(new java.awt.Color(229, 229, 229));
        btDownloadData.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btDownloadData.setText("Download data as text");
        btDownloadData.setToolTipText("");
        btDownloadData.setEnabled(false);
        btDownloadData.setMaximumSize(new java.awt.Dimension(180, 60));
        btDownloadData.setMinimumSize(new java.awt.Dimension(180, 60));
        btDownloadData.setPreferredSize(new java.awt.Dimension(180, 60));
        btDownloadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDownloadData(evt);
            }
        });
        pnDownloadButton.add(btDownloadData, java.awt.BorderLayout.CENTER);

        lbPlaceholder11.setBackground(new java.awt.Color(229, 229, 229));
        pnDownloadButton.add(lbPlaceholder11, java.awt.BorderLayout.LINE_END);

        lbPlaceholder12.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder12.setMaximumSize(new java.awt.Dimension(100, 10));
        lbPlaceholder12.setMinimumSize(new java.awt.Dimension(100, 510));
        lbPlaceholder12.setPreferredSize(new java.awt.Dimension(100, 10));
        pnDownloadButton.add(lbPlaceholder12, java.awt.BorderLayout.PAGE_START);

        lbPlaceholder16.setMaximumSize(new java.awt.Dimension(100, 5));
        lbPlaceholder16.setMinimumSize(new java.awt.Dimension(100, 5));
        lbPlaceholder16.setPreferredSize(new java.awt.Dimension(100, 5));
        pnDownloadButton.add(lbPlaceholder16, java.awt.BorderLayout.PAGE_END);

        pnButtonToolBar.add(pnDownloadButton, java.awt.BorderLayout.LINE_END);

        pnTableDisplayOptions.setBackground(new java.awt.Color(229, 229, 229));
        pnTableDisplayOptions.setMaximumSize(new java.awt.Dimension(220, 100));
        pnTableDisplayOptions.setMinimumSize(new java.awt.Dimension(220, 100));
        pnTableDisplayOptions.setPreferredSize(new java.awt.Dimension(220, 100));
        pnTableDisplayOptions.setLayout(new java.awt.BorderLayout(10, -15));

        lbPlaceholder14.setMaximumSize(new java.awt.Dimension(100, 23));
        lbPlaceholder14.setMinimumSize(new java.awt.Dimension(100, 203));
        lbPlaceholder14.setPreferredSize(new java.awt.Dimension(100, 23));
        pnTableDisplayOptions.add(lbPlaceholder14, java.awt.BorderLayout.PAGE_START);

        pnRadioButtonsTable.setBackground(new java.awt.Color(229, 229, 229));
        pnRadioButtonsTable.setMaximumSize(new java.awt.Dimension(75, 50));
        pnRadioButtonsTable.setMinimumSize(new java.awt.Dimension(75, 50));
        pnRadioButtonsTable.setPreferredSize(new java.awt.Dimension(75, 50));
        pnRadioButtonsTable.setLayout(new java.awt.GridLayout(3, 1, 5, -12));

        rbTableBothAuto.setBackground(new java.awt.Color(229, 229, 229));
        bgTableGroup.add(rbTableBothAuto);
        rbTableBothAuto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        rbTableBothAuto.setText("Table choosing automatically");
        rbTableBothAuto.setActionCommand("2");
        rbTableBothAuto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        rbTableBothAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onTableDisplayOption(evt);
            }
        });
        pnRadioButtonsTable.add(rbTableBothAuto);

        rbTableSeperate.setBackground(new java.awt.Color(229, 229, 229));
        bgTableGroup.add(rbTableSeperate);
        rbTableSeperate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        rbTableSeperate.setSelected(true);
        rbTableSeperate.setText("Table choosing seperate");
        rbTableSeperate.setActionCommand("1");
        rbTableSeperate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        rbTableSeperate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onTableDisplayOption(evt);
            }
        });
        pnRadioButtonsTable.add(rbTableSeperate);

        rbDisplayDifferences.setBackground(new java.awt.Color(229, 229, 229));
        bgTableGroup.add(rbDisplayDifferences);
        rbDisplayDifferences.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        rbDisplayDifferences.setText("Display Data Differences");
        rbDisplayDifferences.setActionCommand("3");
        rbDisplayDifferences.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        rbDisplayDifferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onTableDisplayOption(evt);
            }
        });
        pnRadioButtonsTable.add(rbDisplayDifferences);

        pnTableDisplayOptions.add(pnRadioButtonsTable, java.awt.BorderLayout.CENTER);

        lbPlaceholder13.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder13.setMaximumSize(new java.awt.Dimension(40, 50));
        lbPlaceholder13.setMinimumSize(new java.awt.Dimension(40, 50));
        lbPlaceholder13.setPreferredSize(new java.awt.Dimension(40, 50));
        pnTableDisplayOptions.add(lbPlaceholder13, java.awt.BorderLayout.LINE_START);

        pnButtonToolBar.add(pnTableDisplayOptions, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnButtonToolBar, java.awt.BorderLayout.PAGE_START);

        pnMain.setBackground(new java.awt.Color(229, 229, 229));
        pnMain.setLayout(new java.awt.GridLayout(1, 2, 7, 0));

        pnFirstDatabase.setBackground(new java.awt.Color(229, 229, 229));
        pnFirstDatabase.setLayout(new java.awt.BorderLayout(5, 5));

        pnShowAllTables1.setBackground(new java.awt.Color(229, 229, 229));
        pnShowAllTables1.setMaximumSize(new java.awt.Dimension(200, 320));
        pnShowAllTables1.setMinimumSize(new java.awt.Dimension(100, 160));
        pnShowAllTables1.setPreferredSize(new java.awt.Dimension(200, 320));
        pnShowAllTables1.setLayout(new java.awt.BorderLayout(5, 2));

        paExtractData.setBackground(new java.awt.Color(229, 229, 229));
        paExtractData.setLayout(new java.awt.BorderLayout());

        btExtractData1.setBackground(new java.awt.Color(229, 229, 229));
        btExtractData1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btExtractData1.setText("Extract Data");
        btExtractData1.setToolTipText("");
        btExtractData1.setActionCommand("1");
        btExtractData1.setMaximumSize(new java.awt.Dimension(40, 55));
        btExtractData1.setMinimumSize(new java.awt.Dimension(40, 55));
        btExtractData1.setPreferredSize(new java.awt.Dimension(40, 55));
        btExtractData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onExtractDatas(evt);
            }
        });
        paExtractData.add(btExtractData1, java.awt.BorderLayout.CENTER);

        paButton.setBackground(new java.awt.Color(229, 229, 229));
        paButton.setLayout(new java.awt.BorderLayout());

        lbPlaceholder.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder.setMaximumSize(new java.awt.Dimension(50, 5));
        lbPlaceholder.setMinimumSize(new java.awt.Dimension(50, 5));
        lbPlaceholder.setPreferredSize(new java.awt.Dimension(50, 5));
        paButton.add(lbPlaceholder, java.awt.BorderLayout.PAGE_START);

        lbPlaceholder2.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder2.setMaximumSize(new java.awt.Dimension(30, 30));
        lbPlaceholder2.setMinimumSize(new java.awt.Dimension(30, 30));
        lbPlaceholder2.setPreferredSize(new java.awt.Dimension(30, 30));
        paButton.add(lbPlaceholder2, java.awt.BorderLayout.LINE_END);

        lbPlaceholder3.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder3.setMaximumSize(new java.awt.Dimension(50, 5));
        lbPlaceholder3.setMinimumSize(new java.awt.Dimension(50, 5));
        lbPlaceholder3.setPreferredSize(new java.awt.Dimension(50, 5));
        paButton.add(lbPlaceholder3, java.awt.BorderLayout.PAGE_END);

        lbPlaceholder4.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder4.setMaximumSize(new java.awt.Dimension(30, 30));
        lbPlaceholder4.setMinimumSize(new java.awt.Dimension(30, 30));
        lbPlaceholder4.setPreferredSize(new java.awt.Dimension(30, 30));
        paButton.add(lbPlaceholder4, java.awt.BorderLayout.LINE_START);

        btOpenDBFile1.setBackground(new java.awt.Color(229, 229, 229));
        btOpenDBFile1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btOpenDBFile1.setText("Open Database File");
        btOpenDBFile1.setActionCommand("1");
        btOpenDBFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOpenDatabaseFile(evt);
            }
        });
        paButton.add(btOpenDBFile1, java.awt.BorderLayout.CENTER);

        paExtractData.add(paButton, java.awt.BorderLayout.PAGE_END);

        pnShowAllTables1.add(paExtractData, java.awt.BorderLayout.PAGE_START);

        liTables1.setBackground(new java.awt.Color(229, 229, 229));
        spTable1.setViewportView(liTables1);

        pnShowAllTables1.add(spTable1, java.awt.BorderLayout.CENTER);

        pnFirstDatabase.add(pnShowAllTables1, java.awt.BorderLayout.WEST);

        pnDetails.setBackground(new java.awt.Color(229, 229, 229));
        pnDetails.setLayout(new java.awt.BorderLayout(10, 20));

        lbDatabaseName1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        lbDatabaseName1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDatabaseName1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbDatabaseName1.setMaximumSize(new java.awt.Dimension(70, 40));
        lbDatabaseName1.setMinimumSize(new java.awt.Dimension(70, 40));
        lbDatabaseName1.setPreferredSize(new java.awt.Dimension(70, 40));
        pnDetails.add(lbDatabaseName1, java.awt.BorderLayout.PAGE_START);

        spTableContent1.setBackground(new java.awt.Color(229, 229, 229));
        spTableContent1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        tbTableContent1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", ""
            }
        ));
        spTableContent1.setViewportView(tbTableContent1);

        pnDetails.add(spTableContent1, java.awt.BorderLayout.CENTER);

        pnFirstDatabase.add(pnDetails, java.awt.BorderLayout.CENTER);

        pnMain.add(pnFirstDatabase);

        pnSecondDatabase.setBackground(new java.awt.Color(229, 229, 229));
        pnSecondDatabase.setLayout(new java.awt.BorderLayout(5, 5));

        pnShowAllTables2.setBackground(new java.awt.Color(229, 229, 229));
        pnShowAllTables2.setMaximumSize(new java.awt.Dimension(200, 320));
        pnShowAllTables2.setMinimumSize(new java.awt.Dimension(100, 160));
        pnShowAllTables2.setPreferredSize(new java.awt.Dimension(200, 320));
        pnShowAllTables2.setLayout(new java.awt.BorderLayout(5, 2));

        pnExtractData.setBackground(new java.awt.Color(229, 229, 229));
        pnExtractData.setLayout(new java.awt.BorderLayout());

        btExtractData2.setBackground(new java.awt.Color(229, 229, 229));
        btExtractData2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btExtractData2.setText("Extract Data");
        btExtractData2.setToolTipText("");
        btExtractData2.setActionCommand("2");
        btExtractData2.setMaximumSize(new java.awt.Dimension(40, 55));
        btExtractData2.setMinimumSize(new java.awt.Dimension(40, 55));
        btExtractData2.setPreferredSize(new java.awt.Dimension(40, 55));
        btExtractData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onExtractDatas(evt);
            }
        });
        pnExtractData.add(btExtractData2, java.awt.BorderLayout.CENTER);

        pnButton1.setBackground(new java.awt.Color(229, 229, 229));
        pnButton1.setLayout(new java.awt.BorderLayout());

        lbPlaceholder1.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder1.setMaximumSize(new java.awt.Dimension(50, 5));
        lbPlaceholder1.setMinimumSize(new java.awt.Dimension(50, 5));
        lbPlaceholder1.setPreferredSize(new java.awt.Dimension(50, 5));
        pnButton1.add(lbPlaceholder1, java.awt.BorderLayout.PAGE_START);

        lbPlaceholder5.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder5.setMaximumSize(new java.awt.Dimension(30, 30));
        lbPlaceholder5.setMinimumSize(new java.awt.Dimension(30, 30));
        lbPlaceholder5.setPreferredSize(new java.awt.Dimension(30, 30));
        pnButton1.add(lbPlaceholder5, java.awt.BorderLayout.LINE_END);

        lbPlaceholder6.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder6.setMaximumSize(new java.awt.Dimension(50, 5));
        lbPlaceholder6.setMinimumSize(new java.awt.Dimension(50, 5));
        lbPlaceholder6.setPreferredSize(new java.awt.Dimension(50, 5));
        pnButton1.add(lbPlaceholder6, java.awt.BorderLayout.PAGE_END);

        lbPlaceholder7.setBackground(new java.awt.Color(229, 229, 229));
        lbPlaceholder7.setMaximumSize(new java.awt.Dimension(30, 30));
        lbPlaceholder7.setMinimumSize(new java.awt.Dimension(30, 30));
        lbPlaceholder7.setPreferredSize(new java.awt.Dimension(30, 30));
        pnButton1.add(lbPlaceholder7, java.awt.BorderLayout.LINE_START);

        btOpenDBFile2.setBackground(new java.awt.Color(229, 229, 229));
        btOpenDBFile2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btOpenDBFile2.setText("Open Database File");
        btOpenDBFile2.setActionCommand("2");
        btOpenDBFile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOpenDatabaseFile(evt);
            }
        });
        pnButton1.add(btOpenDBFile2, java.awt.BorderLayout.CENTER);

        pnExtractData.add(pnButton1, java.awt.BorderLayout.PAGE_END);

        pnShowAllTables2.add(pnExtractData, java.awt.BorderLayout.PAGE_START);

        liTablesC.setBackground(new java.awt.Color(229, 229, 229));
        spTableC.setViewportView(liTablesC);

        pnShowAllTables2.add(spTableC, java.awt.BorderLayout.CENTER);

        pnSecondDatabase.add(pnShowAllTables2, java.awt.BorderLayout.EAST);

        pnDetails1.setBackground(new java.awt.Color(229, 229, 229));
        pnDetails1.setLayout(new java.awt.BorderLayout(10, 20));

        lbDatabaseName2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        lbDatabaseName2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDatabaseName2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbDatabaseName2.setMaximumSize(new java.awt.Dimension(70, 40));
        lbDatabaseName2.setMinimumSize(new java.awt.Dimension(70, 40));
        lbDatabaseName2.setPreferredSize(new java.awt.Dimension(70, 40));
        pnDetails1.add(lbDatabaseName2, java.awt.BorderLayout.PAGE_START);

        spTableContent2.setBackground(new java.awt.Color(229, 229, 229));
        spTableContent2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        tbTableContent2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", ""
            }
        ));
        spTableContent2.setViewportView(tbTableContent2);

        pnDetails1.add(spTableContent2, java.awt.BorderLayout.CENTER);

        pnSecondDatabase.add(pnDetails1, java.awt.BorderLayout.CENTER);

        pnMain.add(pnSecondDatabase);

        getContentPane().add(pnMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onCompareData(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCompareData
        DataSelectionModesDialogue selectDialogue = new DataSelectionModesDialogue(this, true);
        selectDialogue.setVisible(true);
        btDownloadData.setEnabled(selectDialogue.isOK());
    }//GEN-LAST:event_onCompareData

    private void onDownloadData(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDownloadData
        SelectDownloadModeDialogue downloadDialogue = new SelectDownloadModeDialogue(this, true);
        downloadDialogue.setVisible(true);
    }//GEN-LAST:event_onDownloadData

    private void onExtractDatas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onExtractDatas
        extractData = Integer.parseInt(evt.getActionCommand());
        DataExtractModeDialogue dataExtractDialogue = new DataExtractModeDialogue(this, true);
        dataExtractDialogue.setDataExctractActionCommand(extractData);
        dataExtractDialogue.setVisible(true);      
        try 
        {
            LoadAndSaveData ld = new LoadAndSaveData();
            if (dataExtractDialogue.isExistingFile()) 
            {
                if (extractData == 1) {
                    liTables1.removeAll();
                    liTablesLeft.clear();
                    liTablesLeft = ld.loadData(dataExtractDialogue.getSelectedDBDump());
                    tnlmLeft = new TableNamesLM(liTablesLeft);
                    liTables1.setModel(tnlmLeft);
                    liTables1.setSelectedIndex(0);
                } else if (extractData == 2) {
                    liTablesC.removeAll();
                    liTablesRight.clear();
                    liTablesRight = ld.loadData(dataExtractDialogue.getSelectedDBDump());
                    tnlmRight = new TableNamesLM(liTablesRight);
                    liTablesC.setModel(tnlmRight);
                    liTablesC.setSelectedIndex(0);
                }
                enableItemSelect = true;
            } 
            else 
            {
                dba = DBAccess.getTheInstance();
                onExtractData();
                //set database name on each label
                
                if (dataExtractDialogue.getFinalDatabaseName().startsWith("1")) 
                {
                    databaseName1 = dataExtractDialogue.getFinalDatabaseName().substring(1);
                    lbDatabaseName1.setText(databaseName1);
                } 
                else 
                {
                    databaseName2 = dataExtractDialogue.getFinalDatabaseName().substring(1);
                    lbDatabaseName2.setText(databaseName2);
                }
                int i = JOptionPane.showConfirmDialog(null, "Do you want to save the Database Extract as file?", "Save Database Extract", JOptionPane.YES_NO_OPTION);
                if (i == JOptionPane.OK_OPTION) {
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
                    fileChooser.setDialogTitle("Choose directory to save Database file");
                    int userSelection = fileChooser.showSaveDialog(null);
                    if (userSelection == JFileChooser.APPROVE_OPTION) {
                        File f = fileChooser.getSelectedFile();
                        if (!f.getPath().endsWith(".txt")) {
                            String pathNew = f.getPath() + ".txt";
                            f = new File(pathNew);
                        }

                        if (extractData == 1) {
                            savedFile1 = f;
                            ld.saveDatabaseFile(f, liTablesLeft, databaseName1);
                        } else {
                            savedFile2 = f;
                            ld.saveDatabaseFile(f, liTablesRight, databaseName2);
                        }
    //                        DownloadDialogue downloadDialogue = new DownloadDialogue(null, true);
                        //                        downloadDialogue.setVisible(true);
                    }
                }
                enableItemSelect = true;
            }
            enableButtons(true);
        } catch (Exception ex) 
        {
            System.out.println("Main Window : onExtractDatas : " + ex.toString());
        }
    }//GEN-LAST:event_onExtractDatas

    private void onOpenDatabaseFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOpenDatabaseFile
        try {
            String openFile = evt.getActionCommand();
            if (Integer.parseInt(openFile) == 1) {
                if (savedFile1 == null) {
                    JOptionPane.showMessageDialog(this, "No Database File has been saved.");
                }
                if (savedFile1 != null) {
                    Desktop.getDesktop().open(savedFile1);
                } else {
                    if (existingFile1 == null) {
                        JOptionPane.showMessageDialog(this, "No Database File has been saved.");
                    } else {
                        Desktop.getDesktop().open(existingFile1);
                    }
                }

            } else if (Integer.parseInt(openFile) == 2) {
                if (savedFile2 == null) {
                    JOptionPane.showMessageDialog(this, "No Database File has been saved.");
                }
                if (savedFile2 != null) {
                    Desktop.getDesktop().open(savedFile2);
                } else {
                    if (existingFile2 == null) {
                        JOptionPane.showMessageDialog(this, "No Database File has been saved.");
                    } else {
                        Desktop.getDesktop().open(existingFile2);
                    }
                }
            }

        } catch (Exception e) 
        {
            System.out.println("Main Window : openDatabaseFile : "+e.toString());
        }

    }//GEN-LAST:event_onOpenDatabaseFile

    private void onTableDisplayOption(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onTableDisplayOption
        switch (evt.getActionCommand()) {
            case "1":
                automaticallySelectingTables = false;
                break;
            case "2":
                automaticallySelectingTables = true;
                break;
            case "3":
                JOptionPane.showMessageDialog(this, "Sorry, this function is not implemented yet");
                break;
            default:
                break;
        }
    }//GEN-LAST:event_onTableDisplayOption

    public void onExtractData() {
        try
        {
            if (extractData == 1) 
            {
                liTables1.removeAll();
                liTablesLeft.clear();
                liTablesLeft = dba.getAllTables(liTablesLeft);
                tnlmLeft = new TableNamesLM(liTablesLeft);
                liTables1.setModel(tnlmLeft);
                liTables1.setSelectedIndex(0);
                leftList = true;
                onNewSelectedItem();
                btOpenDBFile1.setEnabled(true);
            } 
            else if (extractData == 2) 
            {
                liTablesC.removeAll();
                liTablesRight.clear();
                liTablesRight = dba.getAllTables(liTablesRight);
                tnlmRight = new TableNamesLM(liTablesRight);
                liTablesC.setModel(tnlmRight);
                liTablesC.setSelectedIndex(0);
                leftList = false;
                onNewSelectedItem();
                btOpenDBFile2.setEnabled(true);
            }

        } catch (Exception ex) {
            System.out.println("Main Window : onExtractData : " + ex.toString());
        }
    }

    public void onNewSelectedItem() 
    {
        if (automaticallySelectingTables) 
        {
            try 
            {
                int count = 0;
                if (leftList) 
                {
                    int index = this.liTables1.getSelectedIndex();
                    Table table = liTablesLeft.get(index);
                    if (!liTablesRight.isEmpty()) 
                    {
                        for (int i = 0; i < liTablesRight.size(); i++) 
                        {
                            Table t1 = liTablesRight.get(i);
                            if (t1.getTableName().equals(table.getTableName())) 
                            {
                                count++;
                                tctm = new TableContentTM(table.getColumnNames(), table.getAttributes());
                                tbTableContent1.setModel(tctm);
                                this.liTablesC.setSelectedIndex(i);
                                tbTableContent2.setModel(tctm);
                            }
                        }
                        if(count == 0)
                        {
                            throw new IndexOutOfBoundsException();
                        }
                    }
                    else
                    {
                        throw new IndexOutOfBoundsException();
                    }
                } 
                else 
                {
                    int index = this.liTablesC.getSelectedIndex();
                    Table table = liTablesRight.get(index);
                    if (!liTablesLeft.isEmpty()) 
                    {
                        for (int i = 0; i < liTablesLeft.size(); i++) 
                        {
                            count++;
                            Table t1 = liTablesLeft.get(i);
                            if (t1.getTableName().equals(table.getTableName())) 
                            {
                                tctm = new TableContentTM(table.getColumnNames(), table.getAttributes());
                                tbTableContent2.setModel(tctm);
                                this.liTables1.setSelectedIndex(i);
                                tbTableContent1.setModel(tctm);
                            }
                        }
                        if(count == 0)
                        {
                            throw new IndexOutOfBoundsException();
                        }
                    }
                    else
                    {
                        throw new IndexOutOfBoundsException();
                    }
                }
            } catch (IndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "Sorry, there is no such table present.");
            }

        } else {
            if (leftList) {
                Table table = (Table) this.liTables1.getSelectedValue();
                tctm = new TableContentTM(table.getColumnNames(), table.getAttributes());
                tbTableContent1.setModel(tctm);
            } else {
                Table table = (Table) this.liTablesC.getSelectedValue();
                tctm = new TableContentTM(table.getColumnNames(), table.getAttributes());
                tbTableContent2.setModel(tctm);
            }
        }
    }

    public void enableButtons(boolean b) {
        btOpenDBFile1.setEnabled(b);
        btOpenDBFile2.setEnabled(b);
        btCompareData.setEnabled(b);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgTableGroup;
    private javax.swing.JButton btCompareData;
    private javax.swing.JButton btDownloadData;
    private javax.swing.JButton btExtractData1;
    private javax.swing.JButton btExtractData2;
    private javax.swing.JButton btOpenDBFile1;
    private javax.swing.JButton btOpenDBFile2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbDatabaseName1;
    private javax.swing.JLabel lbDatabaseName2;
    private javax.swing.JLabel lbPlaceholder;
    private javax.swing.JLabel lbPlaceholder1;
    private javax.swing.JLabel lbPlaceholder10;
    private javax.swing.JLabel lbPlaceholder11;
    private javax.swing.JLabel lbPlaceholder12;
    private javax.swing.JLabel lbPlaceholder13;
    private javax.swing.JLabel lbPlaceholder14;
    private javax.swing.JLabel lbPlaceholder15;
    private javax.swing.JLabel lbPlaceholder16;
    private javax.swing.JLabel lbPlaceholder2;
    private javax.swing.JLabel lbPlaceholder3;
    private javax.swing.JLabel lbPlaceholder4;
    private javax.swing.JLabel lbPlaceholder5;
    private javax.swing.JLabel lbPlaceholder6;
    private javax.swing.JLabel lbPlaceholder7;
    private javax.swing.JLabel lbPlaceholder9;
    private javax.swing.JList liTables1;
    private javax.swing.JList liTablesC;
    private javax.swing.JPanel paButton;
    private javax.swing.JPanel paExtractData;
    private javax.swing.JPanel pnButton1;
    private javax.swing.JPanel pnButtonToolBar;
    private javax.swing.JPanel pnCompareButton;
    private javax.swing.JPanel pnDetails;
    private javax.swing.JPanel pnDetails1;
    private javax.swing.JPanel pnDownloadButton;
    private javax.swing.JPanel pnExtractData;
    private javax.swing.JPanel pnFirstDatabase;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnRadioButtonsTable;
    private javax.swing.JPanel pnSecondDatabase;
    private javax.swing.JPanel pnShowAllTables1;
    private javax.swing.JPanel pnShowAllTables2;
    private javax.swing.JPanel pnTableDisplayOptions;
    private javax.swing.JRadioButton rbDisplayDifferences;
    private javax.swing.JRadioButton rbTableBothAuto;
    private javax.swing.JRadioButton rbTableSeperate;
    private javax.swing.JScrollPane spTable1;
    private javax.swing.JScrollPane spTableC;
    private javax.swing.JScrollPane spTableContent1;
    private javax.swing.JScrollPane spTableContent2;
    private javax.swing.JTable tbTableContent1;
    private javax.swing.JTable tbTableContent2;
    // End of variables declaration//GEN-END:variables
}
